{"version":3,"file":"component---src-templates-blog-post-tsx-12be270ce622ffe09e46.js","mappings":"0KAkBA,MARYA,IAERC,EAAAA,cAAAA,MAAAA,CAAKC,UCXc,gCDWQ,iG,yHEuE/B,MA1EmEC,IAGxD,YAHyD,KAClEC,EAAI,SACJC,GACI,EACJ,MAAMC,EAAOF,EAAKG,eACZC,GAAkC,QAAtB,EAAAJ,EAAKK,KAAKC,oBAAY,aAAtBC,EAAwBC,QAAS,SAC7C,SAAEC,EAAQ,KAAEC,GAASV,EAE3B,OACEH,EAAAA,cAACc,EAAAA,EAAM,CACLC,UAAQ,EACRX,SAAUA,EACVO,MAAOJ,EACPN,UCrBiB,qCDuBjBD,EAAAA,cAACgB,EAAAA,EAAG,CACFC,KAAK,UACLN,MAAON,EAAKa,YAAYP,MACxBQ,YAAad,EAAKa,YAAYC,aAAed,EAAKe,QAClDC,KAAM,CACJ,CACEC,SAAU,yBACVC,QAASlB,EAAKa,YAAYM,MAE5B,CACEC,KAAM,SACNF,QAA+B,QAAxB,EAAEpB,EAAKK,KAAKC,oBAAY,aAAtBiB,EAAwBC,OAAOF,SAI9CzB,EAAAA,cAAAA,UAAAA,CAAS4B,WAAS,EAACC,SAAS,6BAC1B7B,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAI8B,SAAS,YAAYzB,EAAKa,YAAYP,OAC1CX,EAAAA,cAAAA,IAAAA,CAAGC,UCxCK,gCDwCaI,EAAKa,YAAYM,OAExCxB,EAAAA,cAAAA,UAAAA,CACE+B,wBAAyB,CAAEC,OAAQ3B,EAAK4B,MACxCH,SAAS,gBAEX9B,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAACD,EAAAA,EAAG,QAGRC,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBACbD,EAAAA,cAAAA,KAAAA,CACEkC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXvC,EAAAA,cAAAA,KAAAA,KACGY,GACCZ,EAAAA,cAACwC,EAAAA,KAAI,CAACC,GAAI7B,EAAS8B,OAAOC,KAAMC,IAAI,QAAO,KACtChC,EAASM,YAAYP,QAI9BX,EAAAA,cAAAA,KAAAA,KACGa,GACCb,EAAAA,cAACwC,EAAAA,KAAI,CAACC,GAAI5B,EAAK6B,OAAOC,KAAMC,IAAI,QAC7B/B,EAAKK,YAAYP,MAAM,SAM3B,C","sources":["webpack://ricca509.github.io/./src/components/Bio/index.tsx","webpack://ricca509.github.io/./src/components/Bio/Bio.module.css","webpack://ricca509.github.io/./src/templates/BlogPost.tsx","webpack://ricca509.github.io/./src/templates/BlogPost.module.css"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { container } from \"./Bio.module.css\";\n\nconst Bio = () => {\n  return (\n    <div className={container}>\n\t\tReflections on thoughtful engineering and the systems that shape our work, life, and learning.\n    </div>\n  );\n};\n\nexport default Bio;\n","// extracted by mini-css-extract-plugin\nexport var container = \"Bio-module--container--09357\";","import * as React from \"react\";\nimport { Link, graphql, PageProps } from \"gatsby\";\n\nimport Bio from \"@Components/Bio\";\nimport { Layout } from \"@Components/Layout/Layout\";\nimport { Seo } from \"@Components/Seo/Seo\";\nimport { container, date } from \"./BlogPost.module.css\";\nimport { BlogPostBySlugQuery } from \"../../graphql-types\";\n\nconst BlogPostTemplate: React.FC<PageProps<BlogPostBySlugQuery>> = ({\n  data,\n  location,\n}: any) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n\n  return (\n    <Layout\n      showName\n      location={location}\n      title={siteTitle}\n      className={container}\n    >\n      <Seo\n        type=\"article\"\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        meta={[\n          {\n            property: \"article:published_time\",\n            content: post.frontmatter.date,\n          },\n          {\n            name: \"author\",\n            content: data.site.siteMetadata?.author.name,\n          },\n        ]}\n      />\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p className={date}>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n        }\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nexport var container = \"BlogPost-module--container--d4993\";\nexport var date = \"BlogPost-module--date--7ac8d\";"],"names":["Bio","React","className","_ref","data","location","post","markdownRemark","siteTitle","site","siteMetadata","_data$site$siteMetada","title","previous","next","Layout","showName","Seo","type","frontmatter","description","excerpt","meta","property","content","date","name","_data$site$siteMetada2","author","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}