{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/dockerize-your-selenium-tests-to-run-everywhere/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Riccardo Coppola","author":{"name":"Riccardo Coppola"}}},"markdownRemark":{"id":"bc149ff9-e88f-5083-96b9-dba61054a472","excerpt":"With integration tests being an integral part of a webapp workflow, we should always try to find ways to make them run smoother and make our lives easier. Note…","html":"<p>With integration tests being an integral part of a webapp workflow, we should always try to find ways to make them run smoother and make our lives easier.</p>\n<p><em>Note: This post was updated on May 2019</em></p>\n<h2 id=\"my-dilemma\" style=\"position:relative;\"><a href=\"#my-dilemma\" aria-label=\"my dilemma permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>My dilemma</h2>\n<p>I’ve been working with Selenium Webdriver/WebdriverIO for years now, and the biggest complaint I have is that <strong>I need to have a selenium server running before starting my tests.</strong></p>\n<p>This may seem like a minor problem, but it means having another tab open in my terminal, starting/stopping that process, and it all get way more difficult when you try to automate it in a CI environment. In addition to that, you need Java installed to run the Selenium server (or you can use the <a href=\"https://www.npmjs.com/package/selenium-standalone\">selenium-standalone</a> npm package, which removes the dependency from Java but still needs to be started/stopped).</p>\n<p>While solutions like <a href=\"https://www.browserstack.com/\">Browserstack</a> and <a href=\"https://saucelabs.com\">Saucelabs</a> are quite popular, they are not the quickest way of getting a feedback and <strong>sometimes you just want a quick run on Chrome to check that everything is ok</strong>.</p>\n<p>So how do you solve the problem of having to constantly start and stop your Selenium server? In other words, how do you create a container that runs in isolation and takes care of starting/stopping a selenium server for you? (plus running your tests, of course).</p>\n<h2 id=\"enter-the-docker-and-docker-compose-world\" style=\"position:relative;\"><a href=\"#enter-the-docker-and-docker-compose-world\" aria-label=\"enter the docker and docker compose world permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>Enter the Docker (and Docker Compose) World</h2>\n<p>I am addicted to <a href=\"https://www.docker.com/\">Docker</a>: I’d containerize everything now.<br>\nIt is such a clean way of dealing with (or not dealing with, even better) OS compatibility that it’s a no brainer.</p>\n<p>Let’s apply it to a simple test case: running the webdriverIO example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webdriver.io page'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should have the right title'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://webdriver.io'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">'WebdriverIO · Next-gen WebDriver test framework for Node.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, our application will also have its own <code class=\"language-text\">package.json</code> with all the dependencies listed there and a <code class=\"language-text\">wdio.conf</code> with all the WebdriverIO configuration, but hey, we all know that!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── Dockerfile\n├── README.md\n├── docker-compose.yml\n├── package.json\n├── test\n│   └── index.spec.js\n└── wdio.conf.js</code></pre></div>\n<p>Our package.json defines a test script like this: <code class=\"language-text\">\"test: wdio wdio.conf\"</code>.</p>\n<p>To run the tests we need to install the npm dependencies and run the npm command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> i\n$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<h3 id=\"building-the-app\" style=\"position:relative;\"><a href=\"#building-the-app\" aria-label=\"building the app permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>Building the app</h3>\n<p>No need to install node.js, no need to install npm. Just Docker and a Dockerfile, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:8</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> . /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm i</span></code></pre></div>\n<p>This is just a definition of what we want, a recipe. To build an image from it, we need some Docker magic (<a href=\"https://docs.docker.com/v1.8/reference/commandline/build/\">docker build</a>): <code class=\"language-text\">docker build -t webdriverapp .</code></p>\n<p>In plain English: “Build the Dockerfile in this folder and name the result ‘webdriverapp’“. The result of a build is an image.</p>\n<p>To run the image, and create a container, we need some more Docker magic (<a href=\"https://docs.docker.com/engine/reference/run/\">docker run</a>): <code class=\"language-text\">docker run --rm -ti webdriverapp npm test</code></p>\n<p>In plain English: “Run the command <code class=\"language-text\">npm test</code> from the image named “webdriverapp” in interactive mode (<code class=\"language-text\">-ti</code>) and remove the container afterwards (<code class=\"language-text\">--rm</code>).</p>\n<p>We’re good! Run it, and you’ll get an error saying that we need a Selenium server running!</p>\n<h3 id=\"docker-compose\" style=\"position:relative;\"><a href=\"#docker-compose\" aria-label=\"docker compose permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>docker-compose</h3>\n<p>We definitely need more than just a containerized version of our app: we need a whole stack (which, in this case, is a Selenium server, but it could be a Redis server, a mongodb server, etc) of applications that run in isolation and can communicate with each other.</p>\n<p><a href=\"https://hub.docker.com/\">Docker Hub</a> is like npm for Docker, you can find all sorts of pre-built images there. Turns out, the Selenium guys published a dockerized version of a standalone Selenium, <a href=\"https://hub.docker.com/r/selenium/standalone-chrome/\">selenium/standalone-chrome</a>. Running it with docker will create a container with a selenium server listening on the default port 4444 (always remember that when you run a container that listens on a port, you have to map that port on your host).</p>\n<p><code class=\"language-text\">docker run -p 4444:4444 selenium/standalone-chrome</code></p>\n<p><strong>What we want now is to compose an architecture where the Selenium server is listening and our app is started and connects to it.</strong></p>\n<p><a href=\"https://docs.docker.com/compose/\">docker-compose</a> is the answer.<br>\nIt lets us create a file (<code class=\"language-text\">docker-compose.yml</code>) where we define our stack and how different applications interact with each other.<br>\nEasier done than said:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">app:\n  build: .\n  command: npm test -- --host selenium\n  links:\n    - selenium\n\nselenium:\n  image: selenium/standalone-chrome\n  expose:\n    - \"4444\"\n  log_driver: \"none\"</code></pre></div>\n<p>The file defines two applications: <code class=\"language-text\">app</code> and <code class=\"language-text\">selenium</code>:</p>\n<ul>\n<li><code class=\"language-text\">app</code> needs to be built, and the Dockerfile is in the same directory as docker-compose.yml (<code class=\"language-text\">build: .</code>).<br>\nWhen started, we want to run a specific command: <code class=\"language-text\">command: npm test -- --host selenium</code><br>\nWe also want it to have a link to the <code class=\"language-text\">selenium</code> app.</li>\n<li><code class=\"language-text\">selenium</code>, instead, doesn’t need to be built, it uses a pre-built image from Docker Hub: <code class=\"language-text\">image: selenium/standalone-chrome</code>. It also exposes the port 4444.</li>\n</ul>\n<p><em>Note that docker-compose creates a host for every application that exposes a port, and the hostname is the application name: <code class=\"language-text\">selenium</code> in this case.</em> This is why we pass the option <code class=\"language-text\">--host selenium</code> to WebdriverIO: to tell it where the server is listening.</p>\n<p>Time to build the stack: <code class=\"language-text\">docker-compose build .</code></p>\n<p>And run it: <code class=\"language-text\">docker-compose up .</code></p>\n<p>Done!</p>\n<h3 id=\"github-repo\" style=\"position:relative;\"><a href=\"#github-repo\" aria-label=\"github repo permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>GitHub repo</h3>\n<p>A fully working code example can be found on <a href=\"https://github.com/ricca509/dockerize-webdriverio\">GitHub</a>.</p>\n<h2 id=\"conclusions\" style=\"position:relative;\"><a href=\"#conclusions\" aria-label=\"conclusions permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>Conclusions</h2>\n<p>Docker and docker-compose can help us in many different ways: we can compose entire stacks in minutes. Need a Redis database? Add it to docker-compose. Need a RabbitMq queue? Add it!<br>\nIt is a simple and effective way to package an app and its dependencies.<br>\nOf course in production you’ll have your services hosted somewhere: no problem! You can have different <a href=\"https://docs.docker.com/compose/production/\">docker-compose files for different environments</a>, all defining different stacks!</p>\n<p>There is so much to learn and experiment with!<br>\nMy suggestion is to start with the <a href=\"https://blog.docker.com/\">Docker blog</a> and the <a href=\"https://blog.docker.com/docker-weekly-archives/\">docker weekly newsletter</a>, then the sky is the limit!</p>","frontmatter":{"title":"Dockerize your tests to run everywhere","date":"September 05, 2016","description":"Dockerize your tests to run everywhere"}},"previous":{"fields":{"slug":"/blog/use-proxyquire-to-mock-your-react-components/"},"frontmatter":{"title":"Use proxyquire to mock your React components"}},"next":{"fields":{"slug":"/blog/snapshot-testing-and-why-it-makes-sense/"},"frontmatter":{"title":"Snapshot testing and why it makes sense"}}},"pageContext":{"id":"bc149ff9-e88f-5083-96b9-dba61054a472","previousPostId":"f91bcabc-1693-5bed-b9fa-659a3462440a","nextPostId":"1cac76ed-bd07-51b7-8ce5-9bcd80cfb455"}},
    "staticQueryHashes": ["2841359383"]}