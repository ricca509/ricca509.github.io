{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/jasmine-mock-ajax-for-backbone-requests/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Riccardo Coppola"}},"markdownRemark":{"id":"77e7cc3d-1781-5b5f-a7a4-a1619bb51209","excerpt":"The aim of this post is to write a mock version of the  that will let your code use promises and Backbone perform its stuff. It is often required to test how…","html":"<p><em>The aim of this post is to write a mock version of the <code class=\"language-text\">$.ajax</code> that will let your code use promises and Backbone perform its stuff.</em></p>\n<p>It is often required to test how collections and models behave when you ask them to fetch data from the server.</p>\n<p>To test the flow completely, I prefer not to mock the <code class=\"language-text\">sync</code> of <code class=\"language-text\">fetch</code> methods. I instead do a step back and mock the <code class=\"language-text\">$.ajax</code>, to make sure everything is working fine.</p>\n<h2 id=\"but-i-want-to-use-promises\" style=\"position:relative;\"><a href=\"#but-i-want-to-use-promises\" aria-label=\"but i want to use promises permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>But I want to use promises</h2>\n<p>To add a layer of complexity, I really like to use <em>promises</em> when I fetch collections or model, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myCollection<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cool stuff</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, even if it is just a detail, when you mock the <code class=\"language-text\">$.ajax</code> you need to keep that in mind, since you will also have to provide a promise as part of the mock.</p>\n<h2 id=\"code-setup\" style=\"position:relative;\"><a href=\"#code-setup\" aria-label=\"code setup permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>Code setup</h2>\n<p>This is the simple collection we’ll be testing:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Comments <span class=\"token operator\">=</span> Bakbone<span class=\"token punctuation\">.</span>Collection<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/comments'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And this is the JSON we expect from the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Richard\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"text\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"What a beautiful day\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"text\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"What a rainy day\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>When we fetch this data from the server, we expect to get two models inside our collection.</p>\n<p>Our simple test, just to show how to mock the <code class=\"language-text\">$.ajax</code> method and be able to use promises:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The Comments collection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>collection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fetch data from the server'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the 'done' method is called,</span>\n        <span class=\"token comment\">// the $.ajax correctly return a promise</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If the collection's length is as expected</span>\n            <span class=\"token comment\">// the $.ajax is letting Backbone do it's magic</span>\n            <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"first-attempt-to-mock-ajax\" style=\"position:relative;\"><a href=\"#first-attempt-to-mock-ajax\" aria-label=\"first attempt to mock ajax permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>First attempt to mock <code class=\"language-text\">$.ajax</code></h2>\n<p>We can start writing a simple mock for the <code class=\"language-text\">$.ajax</code> this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">,</span> <span class=\"token string\">'ajax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>and<span class=\"token punctuation\">.</span><span class=\"token function\">callFake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            your_response\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Resolving the promise</span>\n    d<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Returning the promise to be used in our code</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We are creating a <code class=\"language-text\">Deferred</code> object and returning a <code class=\"language-text\">promise</code>, the <em>read-only</em> version of the deferred. This will let our test go into the <code class=\"language-text\">done</code> callback. Anyway, even if it passes the first step, the expectation will fail: the lenght of the collection is 0.</p>\n<h2 id=\"delving-into-backbone-code-fetch\" style=\"position:relative;\"><a href=\"#delving-into-backbone-code-fetch\" aria-label=\"delving into backbone code fetch permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>Delving into Backbone code: <code class=\"language-text\">fetch</code></h2>\n<p>To understand why our code is not completely working, we need to know more about the <a href=\"http://backbonejs.org/docs/backbone.html\">Backbone implementation</a>: check the <code class=\"language-text\">fetch</code> <a href=\"http://backbonejs.org/docs/backbone.html#section-112\">source code</a> for the Collection.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// From the Backbone source code...</span>\n<span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">success</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Something to do when the data come back</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>As you can see, Backbone prepares a <code class=\"language-text\">options.success</code> callback and passes it to the <code class=\"language-text\">sync</code> method (<code class=\"language-text\">return this.sync('read', this, options)</code>), that will pass it straight to the <code class=\"language-text\">$.ajax</code> method.<br>\nBingo!</p>\n<p>In our case, we are resolving a promise, but not calling any callback, so Backbone will never get any data back from the call!</p>\n<h2 id=\"a-working-mock-of-ajax\" style=\"position:relative;\"><a href=\"#a-working-mock-of-ajax\" aria-label=\"a working mock of ajax permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>A working mock of <code class=\"language-text\">$.ajax</code></h2>\n<p>Keeping in mind that the <code class=\"language-text\">success</code> callback is passed as part of the <code class=\"language-text\">options</code> object to the <code class=\"language-text\">$.ajax</code> method, all we have to do is call it passing our <code class=\"language-text\">response</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">,</span> <span class=\"token string\">'ajax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>and<span class=\"token punctuation\">.</span><span class=\"token function\">callFake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            your_response\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Resolving the promise</span>\n    d<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Calling the Backbone's callback</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Returning the promise to be used in our code</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Try again, and your test will pass.</p>\n<p>A good way to learn new things is always to look at the source code :-)</p>\n<p>Riccardo</p>","frontmatter":{"title":"Jasmine: mock an endpoint using $.ajax and Promises for Backbone","date":"September 23, 2014","description":"Jasmine: mock an endpoint using $.ajax and Promises for Backbone"}},"previous":{"fields":{"slug":"/blog/osxlinux-check-who-is-listening-on-a-port/"},"frontmatter":{"title":"OS X/Linux: Check who is listening on a port"}},"next":{"fields":{"slug":"/blog/bower-and-grunt-a-practical-workflow/"},"frontmatter":{"title":"Bower and Grunt - A practical workflow"}}},"pageContext":{"id":"77e7cc3d-1781-5b5f-a7a4-a1619bb51209","previousPostId":"9145929e-76c6-5383-b063-67f7ceed8620","nextPostId":"02f76d88-9ab6-5b3b-9d0a-7ab6c8fbf3ef"}},
    "staticQueryHashes": ["2841359383"]}