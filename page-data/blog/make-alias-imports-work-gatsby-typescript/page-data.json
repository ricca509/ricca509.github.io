{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/make-alias-imports-work-gatsby-typescript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Riccardo Coppola","author":{"name":"Riccardo Coppola"}}},"markdownRemark":{"id":"4fb30a4e-8e31-516a-aeeb-04549aeb4bf2","excerpt":"So you want to write  instead of  in your TypeScript Gatsby app. There are two important pieces to this: TypeScript and webpack (Gatsby uses webpack under the…","html":"<p><em>So you want to write <code class=\"language-text\">@Components/Button</code> instead of <code class=\"language-text\">../../../../components/Button</code> in your TypeScript Gatsby app.</em></p>\n<p>There are two important pieces to this: TypeScript and webpack (Gatsby uses webpack under the hood to build your code).</p>\n<p>To type check your code, TypeScript needs to know where the alias imports map to.\nTo build your code, webpack needs to know the same thing to resolve all dependencies.</p>\n<p>They both need to be told in order for your code to type check and build properly.</p>\n<p>For TypeScript, you define <code class=\"language-text\">paths</code> in the <code class=\"language-text\">tsconfig.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@Components/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"components/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For webpack, you do a similar thing in <code class=\"language-text\">alias</code>. In case of Gatsby, you have a hook function <code class=\"language-text\">onCreateWebpackConfig</code> in <code class=\"language-text\">gatsby-node.ts</code> to modify the default configuration.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateWebpackConfig</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  actions<span class=\"token punctuation\">.</span><span class=\"token function\">setWebpackConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"@Components\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/components\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Copying paths in two places is tedious and prone to error though, and I prefer to have <code class=\"language-text\">tsconfig.json</code> as source of truth then use <a href=\"https://www.npmjs.com/package/tsconfig-paths-webpack-plugin\">tsconfig-paths-webpack-plugin</a> to automatically pull that configuration in webpack.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TsconfigPathsPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tsconfig-paths-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateWebpackConfig</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  actions<span class=\"token punctuation\">.</span><span class=\"token function\">setWebpackConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TsconfigPathsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This concept works with any code that use TypeScript and webpack, but with Gatsby you can use <a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-tsconfig-paths/\">gatsby-plugin-tsconfig-paths</a> in your <code class=\"language-text\">gatsby-config.ts</code> and you won’t have to touch the webpack config at all.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// gatsby-config.ts</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-plugin-tsconfig-paths</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"note\" style=\"position:relative;\"><a href=\"#note\" aria-label=\"note permalink\" class=\"anchor before\"><svg height=\"20\" width=\"20\" viewBox=\"-32 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z\"/></svg></a>Note</h3>\n<p>There is another <a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-alias-imports/\">gatsby plugin</a> that allows you to define alias in gatsby-config.</p>\n<p>This works by simply injecting the options into Webpack using <code class=\"language-text\">onCreateWebpackConfig</code> but won’t do anything for your typescript configuration and you’ll have to manually copy the alias in your <code class=\"language-text\">tsconfig.json</code>.</p>","frontmatter":{"title":"Make alias imports work in Gatsby with TypeScript","date":"April 16, 2022","description":"So you want to write `@Components/Button` instead of `../../../../components/Button` in your TypeScript Gatsby app."}},"previous":{"fields":{"slug":"/blog/how-to-build-feature-flags-react/"},"frontmatter":{"title":"Build feature flags in React using the Context API: how to"}},"next":{"fields":{"slug":"/blog/weekly-review/"},"frontmatter":{"title":"Achieving goals: the importance of the Weekly Review"}}},"pageContext":{"id":"4fb30a4e-8e31-516a-aeeb-04549aeb4bf2","previousPostId":"93dada46-9628-51c4-bb32-9544d3782096","nextPostId":"ece373e1-f5ff-5bab-a6aa-4c2c901a9889"}},
    "staticQueryHashes": ["2841359383"]}